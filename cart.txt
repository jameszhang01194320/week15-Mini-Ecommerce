订单cartController.py cartService.py cartBP.py 如下,请在swagger.yaml增加save(),  和find_all() find_by_id() update() delete()(功能)


#cartController.py
from flask import request, jsonify
from models.schemas.cartSchema import cart_schema, carts_schema
from services import cartService
from marshmallow import ValidationError
from utils.util import token_required

def save():
    try:
        cart_data = cart_schema.load(request.json)
        new_cart = cartService.save(cart_data)
        return cart_schema.jsonify(new_cart), 201
    except ValidationError as e:
        return jsonify(e.messages), 400

@token_required
def find_all():
    page = request.args.get("page")
    per_page = request.args.get("per_page")
    page = 1 if not page else page
    per_page = 10 if not per_page else per_page
    all_carts = cartService.find_all_carts(page, per_page)
    
    return carts_schema.jsonify(all_carts), 200

def find_by_id(cart_id): #dynamic route takes in parameters
    order = cartService.find_by_id(cart_id)

    return cart_schema.jsonify(order), 200

# update
def update(cart_id):
    try:
        cart_data = cart_schema.load(request.json)
    except ValidationError as e:
        return jsonify(e.messages), 400

    updated_cart = cartService.update_cart(cart_id, cart_data)
    if not updated_cart:
        return jsonify({"message": "Cart not found"}), 404

    return cart_schema.jsonify(updated_cart), 200


# delete
def delete(cart_id):
    deleted_cart = cartService.delete_cart(cart_id)
    if not deleted_cart:
        return jsonify({"message": "Cart not found"}), 404

    return jsonify({"message": f"Cart with ID {cart_id} deleted successfully."}), 200


# cartService.py
from database import db
from models.cart import Cart
from models.product import Product
from sqlalchemy import select
from datetime import date #need to get todays date for the cart
from models.cartProduct import cart_product


def save(cart_data):

    new_cart = Cart(customer_id=cart_data['customer_id'], date=date.today()) #date.today() will generate todays date and store it in the date catagory

    for item_id in cart_data['product_ids']:
        query = select(Product).where(Product.id==item_id) #search the product table for a product whose id is the same as the item_id we are looping over
        item = db.session.execute(query).scalar()
        new_cart.products.append(item) #creates the connection from Cart to the associate id, and populates our cart_product table

    db.session.add(new_cart)
    db.session.commit()

    db.session.refresh(new_cart)
    return new_cart

def find_all_carts(page=1, per_page=10):
    query = select(Cart)
    all_carts = db.paginate(query, page=int(page), per_page=int(per_page))
    return all_carts

def find_by_id(cart_id):
    query = select(Cart).where(Cart.id == cart_id)
    order = db.session.execute(query).scalar()
    return order





# Function to update an existing cart
def update_cart(cart_id, cart_data):
    cart = db.session.get(Cart, cart_id)
    if not cart:
        return None

    # Update cart details (e.g., date, products)
    cart.date = cart_data.get('date', cart.date)

    # Update products if provided
    if 'product_ids' in cart_data:
        cart.products.clear()  # Clear existing products
        products = db.session.execute(select(Product).filter(Product.id.in_(cart_data['product_ids']))).scalars().all()
        cart.products.extend(products)

    db.session.commit()
    db.session.refresh(cart)
    return cart






# Function to delete an cart by its ID
def delete_cart(cart_id):
    cart = db.session.get(Cart, cart_id)
    if not cart:
        return None

    db.session.delete(cart)
    db.session.commit()
    return cart


#cartBP.py
from flask import Blueprint

from controllers.cartController import save, find_all, find_by_id, update, delete


cart_blueprint = Blueprint("cart_bp", __name__)

cart_blueprint.route('/', methods=["POST"])(save)
cart_blueprint.route('/', methods=["GET"])(find_all)

cart_blueprint.route('/<int:cart_id>', methods=['GET'])(find_by_id)
cart_blueprint.route('/<int:cart_id>', methods=['PUT'])(update)
cart_blueprint.route('/<int:cart_id>', methods=['DELETE'])(delete)


